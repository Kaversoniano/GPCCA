// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logit
arma::vec logit(const arma::vec& p);
RcppExport SEXP _GPCCA_logit(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(p));
    return rcpp_result_gen;
END_RCPP
}
// sigmoid
arma::mat sigmoid(const arma::mat& X);
RcppExport SEXP _GPCCA_sigmoid(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sigmoid(X));
    return rcpp_result_gen;
END_RCPP
}
// softplus
arma::mat softplus(const arma::mat& X);
RcppExport SEXP _GPCCA_softplus(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(softplus(X));
    return rcpp_result_gen;
END_RCPP
}
// Q_rcpp0
double Q_rcpp0(const arma::vec& param_vec, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S);
RcppExport SEXP _GPCCA_Q_rcpp0(SEXP param_vecSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_rcpp0(param_vec, Y, Z_samples, lambda, n, m, d, S));
    return rcpp_result_gen;
END_RCPP
}
// G_rcpp0
arma::vec G_rcpp0(const arma::vec& param_vec, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S);
RcppExport SEXP _GPCCA_G_rcpp0(SEXP param_vecSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(G_rcpp0(param_vec, Y, Z_samples, lambda, n, m, d, S));
    return rcpp_result_gen;
END_RCPP
}
// Q_rcpp1
double Q_rcpp1(const arma::vec& param_vec, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S, Rcpp::List ind_M, const arma::vec& mu_t, const arma::mat& W_t);
RcppExport SEXP _GPCCA_Q_rcpp1(SEXP param_vecSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP, SEXP ind_MSEXP, SEXP mu_tSEXP, SEXP W_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_t(mu_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_t(W_tSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_rcpp1(param_vec, Y, Z_samples, lambda, n, m, d, S, ind_M, mu_t, W_t));
    return rcpp_result_gen;
END_RCPP
}
// G_rcpp1
arma::vec G_rcpp1(const arma::vec& param_vec, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S, Rcpp::List ind_M, const arma::vec& mu_t, const arma::mat& W_t);
RcppExport SEXP _GPCCA_G_rcpp1(SEXP param_vecSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP, SEXP ind_MSEXP, SEXP mu_tSEXP, SEXP W_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_t(mu_tSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_t(W_tSEXP);
    rcpp_result_gen = Rcpp::wrap(G_rcpp1(param_vec, Y, Z_samples, lambda, n, m, d, S, ind_M, mu_t, W_t));
    return rcpp_result_gen;
END_RCPP
}
// Q_W_rcpp0
double Q_W_rcpp0(const arma::vec& W_vec, const arma::vec& mu, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S);
RcppExport SEXP _GPCCA_Q_W_rcpp0(SEXP W_vecSEXP, SEXP muSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type W_vec(W_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_W_rcpp0(W_vec, mu, Y, Z_samples, lambda, n, m, d, S));
    return rcpp_result_gen;
END_RCPP
}
// G_W_rcpp0
arma::vec G_W_rcpp0(const arma::vec& W_vec, const arma::vec& mu, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S);
RcppExport SEXP _GPCCA_G_W_rcpp0(SEXP W_vecSEXP, SEXP muSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type W_vec(W_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(G_W_rcpp0(W_vec, mu, Y, Z_samples, lambda, n, m, d, S));
    return rcpp_result_gen;
END_RCPP
}
// Q_W_rcpp1
double Q_W_rcpp1(const arma::vec& W_vec, const arma::vec& mu, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S, Rcpp::List ind_M, const arma::mat& W_t);
RcppExport SEXP _GPCCA_Q_W_rcpp1(SEXP W_vecSEXP, SEXP muSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP, SEXP ind_MSEXP, SEXP W_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type W_vec(W_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_t(W_tSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_W_rcpp1(W_vec, mu, Y, Z_samples, lambda, n, m, d, S, ind_M, W_t));
    return rcpp_result_gen;
END_RCPP
}
// G_W_rcpp1
arma::vec G_W_rcpp1(const arma::vec& W_vec, const arma::vec& mu, const arma::mat& Y, const Rcpp::List& Z_samples, double lambda, int n, int m, int d, int S, Rcpp::List ind_M, const arma::mat& W_t);
RcppExport SEXP _GPCCA_G_W_rcpp1(SEXP W_vecSEXP, SEXP muSEXP, SEXP YSEXP, SEXP Z_samplesSEXP, SEXP lambdaSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP SSEXP, SEXP ind_MSEXP, SEXP W_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type W_vec(W_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_samples(Z_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_t(W_tSEXP);
    rcpp_result_gen = Rcpp::wrap(G_W_rcpp1(W_vec, mu, Y, Z_samples, lambda, n, m, d, S, ind_M, W_t));
    return rcpp_result_gen;
END_RCPP
}
// armaInv
arma::mat armaInv(const arma::mat& X);
RcppExport SEXP _GPCCA_armaInv(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(armaInv(X));
    return rcpp_result_gen;
END_RCPP
}
// tcprod
arma::mat tcprod(const arma::vec& x);
RcppExport SEXP _GPCCA_tcprod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tcprod(x));
    return rcpp_result_gen;
END_RCPP
}
// fCore_missingF
Rcpp::List fCore_missingF(const arma::mat& E_z, const arma::mat& E_x, const arma::mat& M, int n, int m, int d);
RcppExport SEXP _GPCCA_fCore_missingF(SEXP E_zSEXP, SEXP E_xSEXP, SEXP MSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type E_z(E_zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E_x(E_xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(fCore_missingF(E_z, E_x, M, n, m, d));
    return rcpp_result_gen;
END_RCPP
}
// fCore_default0
Rcpp::List fCore_default0(const arma::mat& X, Rcpp::List ind_O, Rcpp::List ind_M, const arma::mat& tW, const arma::mat& mu, const arma::mat& Psi, int n, int m, int d);
RcppExport SEXP _GPCCA_fCore_default0(SEXP XSEXP, SEXP ind_OSEXP, SEXP ind_MSEXP, SEXP tWSEXP, SEXP muSEXP, SEXP PsiSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_O(ind_OSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tW(tWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(fCore_default0(X, ind_O, ind_M, tW, mu, Psi, n, m, d));
    return rcpp_result_gen;
END_RCPP
}
// fCore_default1
Rcpp::List fCore_default1(const arma::mat& X, Rcpp::List ind_O, Rcpp::List ind_M, const arma::mat& tW, const arma::mat& mu, const arma::mat& Psi, int n, int m, int d, int N_ms, Rcpp::List ms_index);
RcppExport SEXP _GPCCA_fCore_default1(SEXP XSEXP, SEXP ind_OSEXP, SEXP ind_MSEXP, SEXP tWSEXP, SEXP muSEXP, SEXP PsiSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP, SEXP N_msSEXP, SEXP ms_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_O(ind_OSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tW(tWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type N_ms(N_msSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ms_index(ms_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(fCore_default1(X, ind_O, ind_M, tW, mu, Psi, n, m, d, N_ms, ms_index));
    return rcpp_result_gen;
END_RCPP
}
// diagInv
arma::mat diagInv(const arma::mat& X);
RcppExport SEXP _GPCCA_diagInv(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(diagInv(X));
    return rcpp_result_gen;
END_RCPP
}
// fCore_diagcov
Rcpp::List fCore_diagcov(const arma::mat& X, Rcpp::List ind_O, Rcpp::List ind_M, const arma::mat& tW, const arma::mat& mu, const arma::mat& Psi, int n, int m, int d);
RcppExport SEXP _GPCCA_fCore_diagcov(SEXP XSEXP, SEXP ind_OSEXP, SEXP ind_MSEXP, SEXP tWSEXP, SEXP muSEXP, SEXP PsiSEXP, SEXP nSEXP, SEXP mSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_O(ind_OSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ind_M(ind_MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tW(tWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(fCore_diagcov(X, ind_O, ind_M, tW, mu, Psi, n, m, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GPCCA_logit", (DL_FUNC) &_GPCCA_logit, 1},
    {"_GPCCA_sigmoid", (DL_FUNC) &_GPCCA_sigmoid, 1},
    {"_GPCCA_softplus", (DL_FUNC) &_GPCCA_softplus, 1},
    {"_GPCCA_Q_rcpp0", (DL_FUNC) &_GPCCA_Q_rcpp0, 8},
    {"_GPCCA_G_rcpp0", (DL_FUNC) &_GPCCA_G_rcpp0, 8},
    {"_GPCCA_Q_rcpp1", (DL_FUNC) &_GPCCA_Q_rcpp1, 11},
    {"_GPCCA_G_rcpp1", (DL_FUNC) &_GPCCA_G_rcpp1, 11},
    {"_GPCCA_Q_W_rcpp0", (DL_FUNC) &_GPCCA_Q_W_rcpp0, 9},
    {"_GPCCA_G_W_rcpp0", (DL_FUNC) &_GPCCA_G_W_rcpp0, 9},
    {"_GPCCA_Q_W_rcpp1", (DL_FUNC) &_GPCCA_Q_W_rcpp1, 11},
    {"_GPCCA_G_W_rcpp1", (DL_FUNC) &_GPCCA_G_W_rcpp1, 11},
    {"_GPCCA_armaInv", (DL_FUNC) &_GPCCA_armaInv, 1},
    {"_GPCCA_tcprod", (DL_FUNC) &_GPCCA_tcprod, 1},
    {"_GPCCA_fCore_missingF", (DL_FUNC) &_GPCCA_fCore_missingF, 6},
    {"_GPCCA_fCore_default0", (DL_FUNC) &_GPCCA_fCore_default0, 9},
    {"_GPCCA_fCore_default1", (DL_FUNC) &_GPCCA_fCore_default1, 11},
    {"_GPCCA_diagInv", (DL_FUNC) &_GPCCA_diagInv, 1},
    {"_GPCCA_fCore_diagcov", (DL_FUNC) &_GPCCA_fCore_diagcov, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_GPCCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
